[build-system]
requires = [
  "find_libpython >=0.3,<0.5; sys_platform == 'win32'",
  "setuptools >=77.0.3",
  "swig >=4,<5"
]
build-backend = "setuptools.build_meta"

[project]
name = "agda"
version = "2.8.0"
authors = [{ name = "Wen Kokke", email = "wenkokke@users.noreply.github.com" }]
description = "A project that packages Agda as a Python package."
readme = "README.md"
license = "MIT"
license-files = ["LICENSE"]
requires-python = ">=3.7.1,<3.14"
classifiers = [
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
]

[project.optional-dependencies]
mypy = ["types_setuptools >=45"]
test = ["pytest >=7.1,<9"]

[project.scripts]
"agda" = "agda.__main__:main"
"agda-mode" = "agda.mode.__main__:main"

[tool.cibuildwheel]
# 18-04-2023:
# Cross-compilation does not work with GHC and Cabal.
archs = ["native"]
before-all = "cabal update"
build-frontend = "build"
build = [
  # GHC provides x86_64 and arm64 builds for macOS.
  "*-macosx_x86_64",
  "*-macosx_arm64",
  # GHC provides an AMD64 build for Windows.
  "*-win_amd64",
  # GHC provides an x86_64 build for CentOS 7 (manylinux2014).
  "*-manylinux_x86_64",
  # GHC provides an x86_64 build for Alpine 3.12.
  "*-musllinux_x86_64",
]
test-command = "pytest {package}/tests"
test-extras = "test"
# 19-06-2023:
# Use custom manylinux and musllinux images with GHC 9.6.5 preinstalled.
manylinux-aarch64-image = "wenkokke/manylinux_2_28_ghc965_aarch64"
manylinux-i686-image = "wenkokke/manylinux2014_ghc965_i686"
manylinux-x86_64-image = "wenkokke/manylinux2014_ghc965_x86_64"
musllinux-x86_64-image = "wenkokke/musllinux_1_2_ghc965_x86_64"

[tool.mypy]
mypy_path = "src"
python_version = "3.7"
strict = true
implicit_reexport = false

[tool.setuptools.packages.find]
where = ["src"]

[tool.tox]
legacy_tox_ini = """
[tox]
min_version = 4
env_list = py{39,310,311,312,313}-{lin,mac,win}

[testenv:py{39,310,311,312,313}-{lin,mac,win}]
package = external
package_env = build-{env_name}
platform =
  lin: linux
  mac: darwin
  win: win32
extras =
  test
commands =
  {env_python} -m pytest {posargs}

[testenv:build-py{39,310,311,312,313}-{lin,mac,win}]
deps =
  build
  auditwheel; sys_platform == 'linux'
  delocate; sys_platform == 'darwin'
set_env =
  env_python = {env_python}
  package_root = {package_root}
  dist_dir = {package_root}{/}dist
  dist_tmp_dir = {env_tmp_dir}{/}dist
package_glob =
  py39-lin: {env:dist_dir}{/}*cp39*manylinux*.whl
  py310-lin: {env:dist_dir}{/}*cp310*manylinux*.whl
  py311-lin: {env:dist_dir}{/}*cp311*manylinux*.whl
  py312-lin: {env:dist_dir}{/}*cp312*manylinux*.whl
  py313-lin: {env:dist_dir}{/}*cp313*manylinux*.whl
  py39-mac: {env:dist_dir}{/}*cp39*macosx*.whl
  py310-mac: {env:dist_dir}{/}*cp310*macosx*.whl
  py311-mac: {env:dist_dir}{/}*cp311*macosx*.whl
  py312-mac: {env:dist_dir}{/}*cp312*macosx*.whl
  py313-mac: {env:dist_dir}{/}*cp313*macosx*.whl
  py39-win: {env:dist_dir}{/}*cp39*win*.whl
  py310-win: {env:dist_dir}{/}*cp310*win*.whl
  py311-win: {env:dist_dir}{/}*cp311*win*.whl
  py312-win: {env:dist_dir}{/}*cp312*win*.whl
  py313-win: {env:dist_dir}{/}*cp313*win*.whl
allowlist_externals =
  sh
commands =
  sh {package_root}/scripts/build-wheel.sh
"""
