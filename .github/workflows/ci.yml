name: CI

on:
  push:
    branches:
      - main

jobs:
  test:
    name: ${{ matrix.os.name }} / GHC ${{ matrix.ghc.version }} / Python ${{ matrix.python.version }}
    runs-on: ${{ matrix.os.tag }}

    strategy:
      fail-fast: false
      matrix:
        os:
          # - { tag: ubuntu-latest, name: Linux }
          - { tag: macos-latest, name: macOS }
          - { tag: windows-latest, name: Windows }
        ghc:
          - { version: "9.6.1", bootstrap-version: "9.4.4" }
          - { version: "9.4.4", bootstrap-version: "9.0.2" }
          # - { version: "9.2.7", bootstrap-version: "9.0.2" }
        cabal:
          - { version: "3.8.1.0" }
        python:
          - { version: "3.11", tag: "311" }
          - { version: "3.10", tag: "310" }
          - { version: "3.9", tag: "39" }

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Haskell
        uses: ./.github/actions/setup-haskell
        with:
          ghc-version: ${{ matrix.ghc.version }}
          ghc-bootstrap-version: ${{ matrix.ghc.bootstrap-version }}
          cabal-version: ${{ matrix.cabal.version }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements-ci.txt
        shell: sh
        
      - name: Build
        run: python setup.py build_ext
        shell: sh

      - name: Test
        run: tox run -e py${{ matrix.python.tag }}
        shell: sh
        
      - name: Build wheel
        if: runner.os != 'Windows'
        uses: pypa/cibuildwheel@v2.12.1
        env:
          CIBW_BUILD: 'cp${{ matrix.python.tag }}-*'
          CIBW_TEST_COMMAND: 'pytest {package}/tests'
          CIBW_TEST_EXTRAS: 'test'
        with:
          package-dir: .
          output-dir: wheelhouse
          config-file: "{package}/pyproject.toml"
          
      - name: Build wheel
        if: runner.os == 'Windows'
        run: python -m build --wheel --outdir wheelhouse
        shell: sh

      - uses: actions/upload-artifact@v3
        with:
          name: wheelhouse-GHC-${{ matrix.ghc.version }}
          path: ./wheelhouse/*.whl
